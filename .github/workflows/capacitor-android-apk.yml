name: Android APK (Capacitor)
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prepare Capacitor (init + deps)
        run: |
          npm i -D @capacitor/cli@latest @capacitor/android@latest
          npm i @capacitor/core@latest
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ]; then
            npx cap init "Speak Build APK" "com.frucht718.speakbuildapk" --web-dir=dist
          fi

      - name: Build web (Vite)
        run: npm run build

      - name: Add/Ensure Android platform (creates Gradle project)
        run: |
          if [ ! -d android ]; then
            npx cap add android
          fi
          chmod +x android/gradlew || true
          echo "=== android root ==="; ls -la android || true
          echo "=== wrapper files ==="; ls -la android/gradle/wrapper || true
          echo "=== wrapper.properties (pre) ==="; cat android/gradle/wrapper/gradle-wrapper.properties || true
          echo "=== top build.gradle ==="; sed -n "1,160p" android/build.gradle || true
          echo "=== app build.gradle ==="; sed -n "1,160p" android/app/build.gradle || true

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses || true

      - name: Auto-fix Gradle wrapper to match AGP (only if needed)
        run: |
          set -e
          need_fix=false
          if [ ! -f android/gradle/wrapper/gradle-wrapper.properties ]; then
            need_fix=true
            echo "No wrapper.properties found → will generate"
          fi

          # AGP-Version auslesen
          AGP="$(grep -Eo "com\.android\.tools\.build:gradle:[0-9]+\.[0-9]+(\.[0-9]+)?" -h android/build.gradle android/build.gradle.kts 2>/dev/null | head -n1 | sed "s/.*gradle://")"
          echo "Detected AGP: ${AGP:-unknown}"

          # Mapping AGP -> Gradle (sane defaults)
          GV=""
          if [ -n "$AGP" ]; then
            MAJOR="$(echo "$AGP" | cut -d. -f1)"
            MINOR="$(echo "$AGP" | cut -d. -f2)"
            case "$MAJOR.$MINOR" in
              8.0) GV=8.0 ;;
              8.1) GV=8.2 ;;
              8.2) GV=8.2 ;;
              8.3) GV=8.4 ;;
              8.4) GV=8.6 ;;
              8.5) GV=8.7 ;;
              8.6) GV=8.7 ;;
              8.7) GV=8.9 ;;
              *)   GV=8.2 ;;
            esac
          else
            GV=8.2
          fi
          echo "Target Gradle: $GV"

          if [ -f android/gradle/wrapper/gradle-wrapper.properties ]; then
            CUR="$(grep -Eo "gradle-[0-9]+\.[0-9]+(\.[0-9]+)?-bin\.zip" android/gradle/wrapper/gradle-wrapper.properties | sed "s/gradle-//; s/-bin.zip//" | head -n1 || true)"
            echo "Current wrapper Gradle: ${CUR:-none}"
            if [ "$CUR" != "$GV" ] && [ -n "$GV" ]; then
              need_fix=true
              echo "Gradle wrapper version mismatch → will update"
            fi
          fi

          if $need_fix; then
            echo "Installing system gradle & generating wrapper $GV…"
            sudo apt-get update
            sudo apt-get install -y gradle
            gradle -p android wrapper --gradle-version "$GV"
          fi

          chmod +x android/gradlew || true
          echo "=== wrapper.properties (post) ==="; cat android/gradle/wrapper/gradle-wrapper.properties || true

      - name: Sync Android
        run: npx cap sync android

      - name: Build Release APK
        working-directory: android
        run: |
          set -e
          echo "=== pwd ==="; pwd
          echo "=== here files ==="; ls -la
          ./gradlew --version || true
          # Build
          ./gradlew :app:assembleRelease --no-daemon --stacktrace --warning-mode all

      - name: List Gradle outputs
        run: ls -R android/app/build/outputs || true

      - name: Align & Sign Release APK (with secrets or temp key)
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -Eeuo pipefail
          APK="$(ls -t android/app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "$APK" ]; then
            echo "::error::Keine Release-APK gefunden"; exit 1
          fi

          : > release.keystore
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            printf "%s" "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore || true
          fi

          BT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/34.0.0"
          [ -x "$BT/apksigner" ] || BT="$(ls -d ${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/* | sort -V | tail -n1)"

          if ! keytool -list -keystore release.keystore -storepass "${ANDROID_KEYSTORE_PASSWORD:-android}" -alias "${ANDROID_KEY_ALIAS:-androidreleasekey}" >/dev/null 2>&1; then
            echo "::warning::Keystore/Secrets fehlen – nutze temporären CI-Key"
            keytool -genkeypair -v -keystore temp.keystore -storepass android -alias androidreleasekey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Temp,O=CI,C=US"
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign --ks temp.keystore --ks-key-alias androidreleasekey --ks-pass pass:android --key-pass pass:android --out app-release-signed.apk aligned.apk
          else
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign \
              --ks release.keystore --ks-key-alias "$ANDROID_KEY_ALIAS" \
              --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" --key-pass pass:"$ANDROID_KEY_PASSWORD" \
              --out app-release-signed.apk aligned.apk
          fi

          "$BT/apksigner" verify --print-certs app-release-signed.apk
          mkdir -p apk_out
          mv app-release-signed.apk apk_out/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: apk_out/*
          if-no-files-found: error
          retention-days: 7
