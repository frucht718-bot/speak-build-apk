name: Android APK (Capacitor)
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prepare Capacitor (init + deps)
        run: |
          npm i -D @capacitor/cli@latest @capacitor/android@latest
          npm i @capacitor/core@latest
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ]; then
            npx cap init "Speak Build APK" "com.frucht718.speakbuildapk" --web-dir=dist
          fi

      - name: Build web (Vite)
        run: npm run build

      - name: Add/Ensure Android platform (creates Gradle project)
        run: |
          if [ ! -d android ]; then
            npx cap add android
          fi
          ls -la android || true

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses || true

      # System-Gradle nur als Fallback, um den Wrapper erzeugen zu können
      - name: Install system Gradle (for wrapper generation)
        run: |
          sudo apt-get update
          sudo apt-get install -y gradle
          gradle -v

      - name: Ensure Gradle wrapper
        run: |
          if [ ! -f android/gradlew ]; then
            echo "Wrapper missing — generating…"
            gradle -p android wrapper --gradle-version 8.7
            chmod +x android/gradlew
          fi
          ls -la android | sed -n "1,200p"

      - name: Sync Android
        run: npx cap sync android

      - name: Build Release APK
        working-directory: android
        run: |
          set -e
          ./gradlew --version || true
          ./gradlew :app:assembleRelease

      - name: List Gradle outputs
        run: ls -R android/app/build/outputs || true

      - name: Align & Sign Release APK (with secrets or temp key)
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -Eeuo pipefail
          APK="$(ls -t android/app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "$APK" ]; then
            echo "::error::Keine Release-APK gefunden"; exit 1
          fi

          # Keystore optional aus Secrets
          : > release.keystore
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            printf "%s" "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore || true
          fi

          BT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/34.0.0"
          [ -x "$BT/apksigner" ] || BT="$(ls -d ${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/* | sort -V | tail -n1)"

          if ! keytool -list -keystore release.keystore -storepass "${ANDROID_KEYSTORE_PASSWORD:-android}" -alias "${ANDROID_KEY_ALIAS:-androidreleasekey}" >/dev/null 2>&1; then
            echo "::warning::Keystore/Secrets fehlen – nutze temporären CI-Key"
            keytool -genkeypair -v -keystore temp.keystore -storepass android -alias androidreleasekey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Temp,O=CI,C=US"
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign --ks temp.keystore --ks-key-alias androidreleasekey --ks-pass pass:android --key-pass pass:android --out app-release-signed.apk aligned.apk
          else
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign \
              --ks release.keystore --ks-key-alias "$ANDROID_KEY_ALIAS" \
              --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" --key-pass pass:"$ANDROID_KEY_PASSWORD" \
              --out app-release-signed.apk aligned.apk
          fi

          "$BT/apksigner" verify --print-certs app-release-signed.apk
          mkdir -p apk_out
          mv app-release-signed.apk apk_out/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: apk_out/*
          if-no-files-found: error
          retention-days: 7
