name: Android APK (Capacitor)
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prepare Capacitor (init + deps)
        run: |
          npm i -D @capacitor/cli@latest @capacitor/android@latest
          npm i @capacitor/core@latest
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ]; then
            npx cap init "Speak Build APK" "com.frucht718.speakbuildapk" --web-dir=dist
          fi

      - name: Build web (Vite)
        run: npm run build

      - name: Add/Ensure Android platform
        run: |
          if [ ! -d android ]; then
            npx cap add android
          fi
          chmod +x android/gradlew || true
          echo "=== android root ==="; ls -la android || true

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses || true

      # ---- Hardening/Patches bevor gebaut wird ----
      - name: Patch Android Gradle/Kotlin/SDK/namespace + repos
        run: |
          set -e
          AROOT="android"
          APP="$AROOT/app"
          MANIFEST="$APP/src/main/AndroidManifest.xml"

          # 1) Repositories sicherstellen
          for F in "$AROOT/build.gradle" "$AROOT/build.gradle.kts"; do
            [ -f "$F" ] || continue
            if ! grep -q "google()" "$F"; then
              sed -i "1s;^;buildscript { repositories { google(); mavenCentral() } }\nallprojects { repositories { google(); mavenCentral() } }\n;" "$F"
            elif ! grep -q "mavenCentral()" "$F"; then
              sed -i "s/google()/google()\\n        mavenCentral()/g" "$F"
            fi
          done

          # 2) AGP & Kotlin auf kompatibel setzen (AGP 8.4.2, Kotlin 1.9.24)
          if [ -f "$AROOT/build.gradle" ]; then
            if grep -q "com.android.tools.build:gradle" "$AROOT/build.gradle"; then
              sed -i "s/com\.android\.tools\.build:gradle:[^\"]*/com.android.tools.build:gradle:8.4.2/ /build.gradle
            fi
            if grep -q org.jetbrains.kotlin:kotlin-gradle-plugin /build.gradle; then
              sed -i s/org.jetbrains.kotlin:kotlin-gradle-plugin:[^"]*/org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24/" "$AROOT/build.gradle"
            fi
          fi
          for F in "$AROOT/build.gradle" "$AROOT/build.gradle.kts" "$APP/build.gradle" "$APP/build.gradle.kts"; do
            [ -f "$F" ] || continue
            sed -i "s/id[[:space:]]\+["]com.android.application[\"][[:space:]]*version[[:space:]]\+["][0-9.]+[\"]/id com.android.application version 8.4.2/" "$F" || true
            sed -i "s/id[[:space:]]\+["]org.jetbrains.kotlin.android[\"][[:space:]]*version[[:space:]]\+["][0-9.]+[\"]/id org.jetbrains.kotlin.android version 1.9.24/" "$F" || true
          done

          # 3) compile/target SDK 34
          for F in "$APP/build.gradle" "$APP/build.gradle.kts"; do
            [ -f "$F" ] || continue
            grep -q "compileSdk" "$F" && sed -i "s/compileSdk.*/compileSdk 34/" "$F" || echo "android { compileSdk 34 }" >> "$F"
            if grep -q "defaultConfig" "$F"; then
              sed -i "s/targetSdk.*/targetSdk 34/" "$F" || true
            else
              sed -i "/android[[:space:]]*{.*/a \ \ defaultConfig { targetSdk 34 }" "$F"
            fi
          done

          # 4) namespace (falls fehlt) aus Manifest ableiten
          if [ -f "$MANIFEST" ]; then
            PKG="$(sed -n "s/.*package=\"\\([^\"]*\\)\".*/\\1/p" "$MANIFEST" | head -n1)"
          fi
          [ -n "$PKG" ] || PKG="com.frucht718.speakbuildapk"
          for F in "$APP/build.gradle" "$APP/build.gradle.kts"; do
            [ -f "$F" ] || continue
            if ! grep -q "namespace" "$F"; then
              sed -i "s/android[[:space:]]*{/&\n    namespace \"$PKG\"/" "$F"
            fi
          done

          # 5) Gradle properties
          GP="$AROOT/gradle.properties"
          touch "$GP"
          grep -q "org.gradle.jvmargs" "$GP" || echo "org.gradle.jvmargs=-Xmx4g -Dkotlin.daemon.jvm.options=-Xmx2g" >> "$GP"
          grep -q "android.useAndroidX" "$GP" || echo "android.useAndroidX=true" >> "$GP"

          # 6) Dummy-Monochrome-Icon, falls referenziert aber fehlt
          MONO_DIR="$APP/src/main/res/mipmap-anydpi-v26"
          MONO_XML="$MONO_DIR/ic_launcher_monochrome.xml"
          if [ -f "$APP/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" ] && [ ! -f "$MONO_XML" ]; then
            mkdir -p "$MONO_DIR"
            cat > "$MONO_XML" <<EOF
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
  <background android:drawable="@mipmap/ic_launcher_background"/>
  <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
EOF
          fi

      - name: Ensure Gradle wrapper (8.6)
        run: |
          set -e
          if [ ! -f android/gradle/wrapper/gradle-wrapper.properties ] || ! grep -q "gradle-8.6-bin.zip" android/gradle/wrapper/gradle-wrapper.properties; then
            echo "Installing system Gradle & generating wrapper 8.6…"
            sudo apt-get update
            sudo apt-get install -y gradle
            gradle -p android wrapper --gradle-version 8.6
          fi
          chmod +x android/gradlew || true
          echo "=== wrapper.properties ==="; cat android/gradle/wrapper/gradle-wrapper.properties || true

      - name: Sync Android (Capacitor)
        run: npx cap sync android

      - name: Build Release APK
        working-directory: android
        run: |
          set -e
          ./gradlew --version || true
          ./gradlew :app:assembleRelease --no-daemon --stacktrace --warning-mode all

      - name: List Gradle outputs
        if: always()
        run: ls -R android/app/build/outputs || true

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-logs
          path: |
            android/**/build/reports/**
            android/**/outputs/logs/**
            android/gradle/wrapper/gradle-wrapper.properties
          retention-days: 3

      - name: Align & Sign Release APK (with secrets or temp key)
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -Eeuo pipefail
          APK="$(ls -t android/app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true)"
          if [ -z "$APK" ]; then
            echo "::error::Keine Release-APK gefunden"; exit 1
          fi

          : > release.keystore
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ]; then
            printf "%s" "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore || true
          fi

          BT="${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/34.0.0"
          [ -x "$BT/apksigner" ] || BT="$(ls -d ${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/* | sort -V | tail -n1)"

          if ! keytool -list -keystore release.keystore -storepass "${ANDROID_KEYSTORE_PASSWORD:-android}" -alias "${ANDROID_KEY_ALIAS:-androidreleasekey}" >/dev/null 2>&1; then
            echo "::warning::Keystore/Secrets fehlen – nutze temporären CI-Key"
            keytool -genkeypair -v -keystore temp.keystore -storepass android -alias androidreleasekey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Temp,O=CI,C=US"
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign --ks temp.keystore --ks-key-alias androidreleasekey --ks-pass pass:android --key-pass pass:android --out app-release-signed.apk aligned.apk
          else
            "$BT/zipalign" -f -p 4 "$APK" aligned.apk
            "$BT/apksigner" sign \
              --ks release.keystore --ks-key-alias "$ANDROID_KEY_ALIAS" \
              --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" --key-pass pass:"$ANDROID_KEY_PASSWORD" \
              --out app-release-signed.apk aligned.apk
          fi

          "$BT/apksigner" verify --print-certs app-release-signed.apk
          mkdir -p apk_out
          mv app-release-signed.apk apk_out/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: apk_out/*
          if-no-files-found: error
          retention-days: 7
