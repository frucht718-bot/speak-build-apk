name: Android APK (Capacitor)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Prepare Capacitor (init + deps)
        run: |
          npm i -D @capacitor/cli@latest @capacitor/android@latest
          npm i @capacitor/core@latest
          if [ ! -f capacitor.config.ts ] && [ ! -f capacitor.config.json ]; then
            npx cap init "Speak Build APK" "com.frucht718.speakbuildapk" --web-dir=dist
          fi

      - name: Build web (Vite)
        run: npm run build

      - name: Add Android
        run: |
          npx cap add android || true
          echo "org.gradle.jvmargs=-Xmx2g -XX:+UseParallelGC" >> android/gradle.properties

      - name: Put Icon with ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick
          if [ -f assets/icon.png ]; then
            RES="android/app/src/main/res"
            declare -A SZ=( [mdpi]=48 [hdpi]=72 [xhdpi]=96 [xxhdpi]=144 [xxxhdpi]=192 )
            IM_BIN="convert"; command -v magick >/dev/null 2>&1 && IM_BIN="magick convert"
            for D in mdpi hdpi xhdpi xxhdpi xxxhdpi; do
              mkdir -p "$RES/mipmap-$D"
              $IM_BIN assets/icon.png -resize "${SZ[$D]}x${SZ[$D]}" "$RES/mipmap-$D/ic_launcher.png"
              $IM_BIN assets/icon.png -resize "${SZ[$D]}x${SZ[$D]}" "$RES/mipmap-$D/ic_launcher_round.png"
            done
          else
            echo "WARN: assets/icon.png fehlt – Standard-Launcher bleibt."
          fi

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses

      - name: Sync Android
        run: npx cap sync android

      - name: Build Release APK
        working-directory: android
        run: ./gradlew :app:assembleRelease

      - name: List Gradle outputs
        run: |
          echo "=== outputs tree ==="
          ls -R android/app/build/outputs || true

      # --- TEMP SIGNING (Runner-keystore) ---
      - name: Align & Sign Release APK (temporary keystore)
        shell: bash
        run: |
          set -Eeuo pipefail
          APK="$(ls android/app/build/outputs/apk/release/*.apk | head -n1)"
          if [ -z "$APK" ]; then
            echo "Keine Release-APK gefunden"; exit 1
          fi
          echo "Erzeuge temporären Keystore…"
          keytool -genkeypair -v -keystore temp-release.keystore -storepass android \
            -alias androidreleasekey -keypass android -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Temp Release,O=CI,C=US"
          BT="\${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/34.0.0"
          [ -x "$BT/apksigner" ] || BT="$(ls -d \${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}/build-tools/* | sort -V | tail -n1)"
          "$BT/zipalign" -f -p 4 "$APK" aligned.apk
          "$BT/apksigner" sign \
            --ks temp-release.keystore --ks-key-alias androidreleasekey \
            --ks-pass pass:android --key-pass pass:android \
            --out app-release-signed.apk aligned.apk
          "$BT/apksigner" verify --print-certs app-release-signed.apk
          mkdir -p apk_out
          mv app-release-signed.apk apk_out/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: apk_out/*
          if-no-files-found: error
          retention-days: 7
